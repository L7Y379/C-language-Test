#include<stdio.h>
#include<string.h>
void swap(int *a, int *b){

int t;
t = *a;
*a = *b;
*b = t;
} 
void sort(int *a,int low,int high){
	int t,i,j;
	if(low>=high){
		return;
	}
	i=low;j=high;t=a[i];
	while(i<j){
		while(a[j]>t){
			j--;
		};
		while(a[i]<t){
			i++;
		};
		if(i<j)
			swap(&a[j],&a[i]);
	}
	sort(a,low,i-1);
	sort(a,i+1,high);
}

void sort1(int *a, int left, int right)
{
    if(left >= right)/*如果左边索引大于或者等于右边的索引就代表已经整理完成一个组了*/
    {
        return ;
    }
    int i = left;
    int j = right;
    int key = a[left];
     
    while(i < j)                               /*控制在当组内寻找一遍*/
    {
        while(i < j && key <= a[j])
        /*而寻找结束的条件就是，1，找到一个小于或者大于key的数（大于或小于取决于你想升
        序还是降序）2，没有符合条件1的，并且i与j的大小没有反转*/ 
        {
            j--;/*向前寻找*/
        }
         
        a[i] = a[j];
        /*找到一个这样的数后就把它赋给前面的被拿走的i的值（如果第一次循环且key是
        a[left]，那么就是给key）*/
         
        while(i < j && key >= a[i])
        /*这是i在当组内向前寻找，同上，不过注意与key的大小关系停止循环和上面相反，
        因为排序思想是把数往两边扔，所以左右两边的数大小与key的关系相反*/
        {
            i++;
        }
         
        a[j] = a[i];
    }
     
    a[i] = key;/*当在当组内找完一遍以后就把中间数key回归*/
    sort1(a, left, i - 1);/*最后用同样的方式对分出来的左边的小组进行同上的做法*/
    sort1(a, i + 1, right);/*用同样的方式对分出来的右边的小组进行同上的做法*/
                       /*当然最后可能会出现很多分左右，直到每一组的i = j 为止*/
}

   	
int main(){
	int i,j,temp;
	int a[10];
	/*printf("请输入十个整数，中间用空格隔开：\n");
	scanf("%d %d %d %d %d %d %d %d %d %d",&a[0],&a[1],&a[2],&a[3],&a[4],&a[5],&a[6],&a[7],&a[8],&a[9]);
	printf("你输入十个整数为：\n");
	printf("%d %d %d %d %d %d %d %d %d %d\n",a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9]);
	printf("按从小到大排列为：\n");
	for(i=0;i<10;i++){   //冒泡排序 
		for(j=0;j<(9-i);j++){
			if(a[j]>a[j+1]){
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp; 
			}
		}
	}
	printf("%d %d %d %d %d %d %d %d %d %d\n",a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9]); */
	
	
	printf("请输入十个整数，中间用空格隔开：\n");
	scanf("%d %d %d %d %d %d %d %d %d %d",&a[0],&a[1],&a[2],&a[3],&a[4],&a[5],&a[6],&a[7],&a[8],&a[9]);
	sort(a,0,9);
	printf("%d %d %d %d %d %d %d %d %d %d\n",a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9]); 
	
	return 0;
} 